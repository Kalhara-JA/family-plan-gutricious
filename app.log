2024-10-28T07:31:42.104Z [INFO]: Retrieved family details for manager: manager@example.com
2024-10-28T07:36:30.189Z [INFO]: Received request to get family details for manager: manager@example.com
2024-10-28T07:36:30.191Z [INFO]: Fetching family details for manager: manager@example.com
2024-10-28T07:36:30.259Z [ERROR]: No family details found for manager: manager@example.com
2024-10-28T07:36:30.259Z [INFO]: Retrieved family details for manager: manager@example.com
2024-10-28T07:37:55.794Z [INFO]: Received request to create family for manager: manager@example.com
2024-10-28T07:37:55.795Z [INFO]: Creating family for manager: manager@example.com
2024-10-28T07:37:55.871Z [INFO]: Family created for manager: manager@example.com
2024-10-28T07:37:55.872Z [INFO]: Family created successfully for manager: manager@example.com
2024-10-28T07:38:04.157Z [INFO]: Received request to add family member: member@example.com to manager: manager@example.com
2024-10-28T07:38:04.158Z [INFO]: Adding family member: member@example.com to manager: manager@example.com
2024-10-28T07:38:04.166Z [INFO]: Family member member@example.com added to manager: manager@example.com
2024-10-28T07:38:04.167Z [INFO]: Invitation email sent to member@example.com
2024-10-28T07:38:04.167Z [INFO]: Family member member@example.com added successfully to manager: manager@example.com
2024-10-28T07:38:18.490Z [INFO]: Received request to get family details for manager: manager@example.com
2024-10-28T07:38:18.491Z [INFO]: Fetching family details for manager: manager@example.com
2024-10-28T07:38:18.497Z [INFO]: Retrieved family details for manager: manager@example.com
2024-10-28T07:39:12.439Z [INFO]: Received request to add family member: member@example.com to manager: manager@example.com
2024-10-28T07:39:12.440Z [INFO]: Adding family member: member@example.com to manager: manager@example.com
2024-10-28T07:39:12.457Z [ERROR]: Error adding family member member@example.com to manager manager@example.com: 
Invalid `prisma.familyMember.create()` invocation in
/root/family-plan-app/src/services/familyService.ts:36:52

  33   throw new Error('Family not found');
  34 }
  35 
→ 36 const familyMember = await prisma.familyMember.create(
Unique constraint failed on the fields: (`email`)
2024-10-28T07:39:12.458Z [ERROR]: Failed to add family member member@example.com to manager manager@example.com: 
Invalid `prisma.familyMember.create()` invocation in
/root/family-plan-app/src/services/familyService.ts:36:52

  33   throw new Error('Family not found');
  34 }
  35 
→ 36 const familyMember = await prisma.familyMember.create(
Unique constraint failed on the fields: (`email`)
2024-10-28T07:39:18.430Z [INFO]: Received request to get family details for manager: manager@example.com
2024-10-28T07:39:18.430Z [INFO]: Fetching family details for manager: manager@example.com
2024-10-28T07:39:18.434Z [INFO]: Retrieved family details for manager: manager@example.com
2024-10-28T07:42:00.589Z [INFO]: Received request to get family details for manager: manager@example.com
2024-10-28T07:42:00.591Z [INFO]: Fetching family details for manager: manager@example.com
2024-10-28T07:42:00.666Z [INFO]: Retrieved family details for manager: manager@example.com
2024-10-28T07:42:04.931Z [INFO]: Received request to add family member: member@example.com to manager: manager@example.com
2024-10-28T07:42:04.931Z [INFO]: Adding family member: member@example.com to manager: manager@example.com
2024-10-28T07:42:04.952Z [ERROR]: Error adding family member member@example.com to manager manager@example.com: 
Invalid `prisma.familyMember.create()` invocation in
/root/family-plan-app/src/services/familyService.ts:36:52

  33   throw new Error('Family not found');
  34 }
  35 
→ 36 const familyMember = await prisma.familyMember.create(
Unique constraint failed on the fields: (`email`)
2024-10-28T07:42:04.952Z [ERROR]: Failed to add family member member@example.com to manager manager@example.com: 
Invalid `prisma.familyMember.create()` invocation in
/root/family-plan-app/src/services/familyService.ts:36:52

  33   throw new Error('Family not found');
  34 }
  35 
→ 36 const familyMember = await prisma.familyMember.create(
Unique constraint failed on the fields: (`email`)
2024-10-28T08:10:11.253Z [INFO]: Received request to get family details for manager: manager@example.com
2024-10-28T08:10:11.258Z [INFO]: Fetching family details for manager: manager@example.com
2024-10-28T08:10:11.336Z [INFO]: Retrieved family details for manager: manager@example.com
2024-10-28T08:10:19.594Z [INFO]: Received request to create family for manager: manager@example.com
2024-10-28T08:10:19.595Z [INFO]: Creating family for manager: manager@example.com
2024-10-28T08:10:19.614Z [ERROR]: Error creating family for manager manager@example.com: 
Invalid `prisma.family.create()` invocation in
/root/family-plan-app/src/services/familyService.ts:9:40

  6 const createFamily = async (managerEmail: string) => {
  7   try {
  8     logger.info(`Creating family for manager: ${managerEmail}`);
→ 9     const family = await prisma.family.create(
Unique constraint failed on the fields: (`manager`)
2024-10-28T08:10:19.614Z [ERROR]: Failed to create family for manager manager@example.com: Could not create family
2024-10-28T08:18:00.567Z [INFO]: Received request to create family for manager: manager@example.com
2024-10-28T08:18:00.569Z [INFO]: Creating family for manager: manager@example.com
2024-10-28T08:18:00.665Z [ERROR]: Error creating family for manager manager@example.com: 
Invalid `prisma.family.create()` invocation in
/root/family-plan-app/src/services/familyService.ts:9:40

  6 const createFamily = async (managerEmail: string) => {
  7   try {
  8     logger.info(`Creating family for manager: ${managerEmail}`);
→ 9     const family = await prisma.family.create(
Unique constraint failed on the fields: (`manager`)
2024-10-28T08:18:00.665Z [ERROR]: Failed to create family for manager manager@example.com: Could not create family
2024-10-28T09:32:39.723Z [WARN]: Unauthorized access attempt, session token missing
2024-10-28T10:10:44.692Z [INFO]: Received request to create family for manager: testmanager@example.com with plan: Basic Plan
2024-10-28T10:10:44.695Z [INFO]: Creating family for manager: testmanager@example.com with plan: Basic Plan
2024-10-28T10:10:44.792Z [ERROR]: Error creating family for manager testmanager@example.com: 
Invalid `prisma.plan.findUnique()` invocation in
/root/family-plan-app/src/services/familyService.ts:9:36

  6 const createFamily = async (managerEmail: string, planName: string) => {
  7   try {
  8     logger.info(`Creating family for manager: ${managerEmail} with plan: ${planName}`);
→ 9     const plan = await prisma.plan.findUnique(
The table `public.Plan` does not exist in the current database.
2024-10-28T10:10:44.793Z [ERROR]: Failed to create family for manager testmanager@example.com: Could not create family
2024-10-28T10:11:53.160Z [INFO]: Received request to create family for manager: testmanager@example.com with plan: Basic Plan
2024-10-28T10:11:53.163Z [INFO]: Creating family for manager: testmanager@example.com with plan: Basic Plan
2024-10-28T10:11:53.254Z [ERROR]: Error creating family for manager testmanager@example.com: Plan not found
2024-10-28T10:11:53.255Z [ERROR]: Failed to create family for manager testmanager@example.com: Could not create family
2024-10-28T11:13:44.623Z [INFO]: Received request to create plan with name: Family Plan
2024-10-28T11:13:44.625Z [INFO]: Creating plan with name: Family Plan
2024-10-28T11:13:44.703Z [INFO]: Plan created successfully with name: Family Plan
2024-10-28T11:13:44.704Z [INFO]: Plan created successfully with name: Family Plan
2024-10-28T11:13:53.497Z [INFO]: Received request to get plan details for plan ID: 1
2024-10-28T11:13:53.499Z [INFO]: Fetching plan details for ID: 1
2024-10-28T11:13:53.504Z [INFO]: Retrieved plan details for plan ID: 1
2024-10-28T11:14:04.659Z [INFO]: Received request to update plan with ID: 1
2024-10-28T11:14:04.660Z [INFO]: Updating plan with ID: 1
2024-10-28T11:14:04.669Z [INFO]: Updated plan with ID: 1
2024-10-28T11:14:12.016Z [INFO]: Received request to update plan with ID: 1
2024-10-28T11:14:12.017Z [INFO]: Updating plan with ID: 1
2024-10-28T11:14:12.022Z [INFO]: Updated plan with ID: 1
2024-10-28T11:16:29.815Z [WARN]: Unauthorized access attempt, session token missing
2024-10-28T11:18:18.457Z [WARN]: Unauthorized access attempt, session token missing
2024-10-28T11:22:55.545Z [INFO]: Received request to create family for manager: manager@example.com with plan: Basic Plan
2024-10-28T11:22:55.546Z [INFO]: Creating family for manager: manager@example.com with plan: Basic Plan
2024-10-28T11:22:55.616Z [ERROR]: Error creating family for manager manager@example.com: Plan not found
2024-10-28T11:22:55.617Z [ERROR]: Failed to create family for manager manager@example.com: Could not create family
2024-10-28T11:25:59.155Z [INFO]: Received request to create family for manager: manager@example.com with plan: Basic Plan
2024-10-28T11:25:59.157Z [INFO]: Creating family for manager: manager@example.com with plan: Basic Plan
2024-10-28T11:25:59.225Z [ERROR]: Error creating family for manager manager@example.com: Plan not found
2024-10-28T11:25:59.225Z [ERROR]: Failed to create family for manager manager@example.com: Could not create family
2024-10-28T11:28:04.609Z [INFO]: Received request to get plan details for plan ID: 1
2024-10-28T11:28:04.611Z [INFO]: Fetching plan details for ID: 1
2024-10-28T11:28:04.679Z [INFO]: Retrieved plan details for plan ID: 1
2024-10-28T11:28:39.818Z [INFO]: Received request to create family for manager: manager@example.com with plan: 1
2024-10-28T11:28:39.818Z [INFO]: Creating family for manager: manager@example.com with plan: 1
2024-10-28T11:28:39.899Z [INFO]: Family created for manager: manager@example.com
2024-10-28T11:28:39.900Z [INFO]: Family created successfully for manager: manager@example.com
2024-10-28T11:29:04.672Z [INFO]: Received request to get family details for manager: manager@example.com
2024-10-28T11:29:04.673Z [INFO]: Fetching family details for manager: manager@example.com
2024-10-28T11:29:04.680Z [INFO]: Retrieved family details for manager: manager@example.com
2024-10-28T11:29:22.204Z [INFO]: Received request to update plan with ID: 1
2024-10-28T11:29:22.204Z [INFO]: Updating plan with ID: 1
2024-10-28T11:29:22.210Z [INFO]: Updated plan with ID: 1
2024-10-28T11:29:32.488Z [INFO]: Received request to add family member: member@example.com to manager: manager@example.com
2024-10-28T11:29:32.488Z [INFO]: Adding family member: member@example.com to manager: manager@example.com
2024-10-28T11:29:32.500Z [INFO]: Family member member@example.com added to manager: manager@example.com
2024-10-28T11:29:32.500Z [INFO]: Invitation email sent to member@example.com
2024-10-28T11:29:32.500Z [INFO]: Family member member@example.com added successfully to manager: manager@example.com
2024-10-28T11:29:38.819Z [INFO]: Received request to add family member: member@example.com to manager: manager@example.com
2024-10-28T11:29:38.819Z [INFO]: Adding family member: member@example.com to manager: manager@example.com
2024-10-28T11:29:38.844Z [ERROR]: Error adding family member member@example.com to manager manager@example.com: Family member already exists.
2024-10-28T11:29:38.844Z [ERROR]: Failed to add family member member@example.com to manager manager@example.com: Family member already exists
2024-10-28T11:29:50.620Z [INFO]: Received request to add family member: member@example.com to manager: undefined
2024-10-28T11:29:50.621Z [INFO]: Adding family member: member@example.com to manager: undefined
2024-10-28T11:29:50.633Z [ERROR]: Error adding family member member@example.com to manager undefined: 
Invalid `prisma.family.findUnique()` invocation in
/root/family-plan-app/src/services/family.service.ts:40:40

  37 const addFamilyMember = async (managerEmail: string, memberEmail: string) => {
  38   try {
  39     logger.info(`Adding family member: ${memberEmail} to manager: ${managerEmail}`);
→ 40     const family = await prisma.family.findUnique({
           where: {
             manager: undefined,
         ?   id?: Int,
         ?   AND?: FamilyWhereInput | FamilyWhereInput[],
         ?   OR?: FamilyWhereInput[],
         ?   NOT?: FamilyWhereInput | FamilyWhereInput[],
         ?   planId?: IntFilter | Int,
         ?   members?: FamilyMemberListRelationFilter,
         ?   plan?: PlanRelationFilter | PlanWhereInput
           },
           include: {
             members: true,
             plan: true
           }
         })

Argument `where` of type FamilyWhereUniqueInput needs at least one of `id` or `manager` arguments. Available options are marked with ?.
2024-10-28T11:29:50.633Z [ERROR]: Failed to add family member member@example.com to manager undefined: Could not add family member
2024-10-28T11:30:17.946Z [INFO]: Received request to add family member: member2@example.com to manager: manager@example.com
2024-10-28T11:30:17.946Z [INFO]: Adding family member: member2@example.com to manager: manager@example.com
2024-10-28T11:30:17.954Z [INFO]: Family member member2@example.com added to manager: manager@example.com
2024-10-28T11:30:17.954Z [INFO]: Invitation email sent to member2@example.com
2024-10-28T11:30:17.954Z [INFO]: Family member member2@example.com added successfully to manager: manager@example.com
2024-10-28T11:30:22.492Z [INFO]: Received request to get family details for manager: manager@example.com
2024-10-28T11:30:22.492Z [INFO]: Fetching family details for manager: manager@example.com
2024-10-28T11:30:22.497Z [INFO]: Retrieved family details for manager: manager@example.com
